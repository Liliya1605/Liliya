# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h6VZvCEmb0GfzlOcBkhyD5g8vq_sVe3R
"""



"""Thanks to Luke Barosse, who originally created the course
https://www.youtube.com/watch?v=wUSDVGivd-8&t=35539s

# Предварительный анализ данных и введение

## Цель
1. Изучить наиболее высокооплачиваемые должности и навыки в индустрии обработки данных.
2. Использовать Python для изучения реальных данных о вакансиях.
3. Для соискателей: использовать эти знания, чтобы помочь найти лучшие вакансии.

## Предварительный анализ данных для всех ролей, связанных с данными

### Роли для изучения
"""

# Загрузка данных
dataset = load_dataset('lukebarousse/data_jobs')
df = dataset['train'].to_pandas()


# Очистка данных
df['job_posted_date'] = pd.to_datetime(df['job_posted_date'])
df['job_skills'] = df['job_skills'].apply(lambda x: ast.literal_eval(x) if pd.notna(x) else x)

df_plot = df['job_title_short'].value_counts().to_frame()


sns.set_theme(style='ticks')
sns.barplot(data=df_plot, x='count', y='job_title_short', hue='count', palette='dark:b_r', legend=False)
sns.despine()
plt.title('Количество рабочих мест на одну должность')
plt.xlabel('Количество рабочих мест')
plt.ylabel('')
plt.show()

"""### Страны для изучения"""

df_plot = df['job_country'].value_counts().to_frame().head(20)


sns.set_theme(style='ticks')
sns.barplot(data=df_plot, x='count', y='job_country', hue='count', palette='dark:b_r', legend=False)
sns.despine()
plt.title('Количество рабочих мест в стране')
plt.xlabel('Количество рабочих мест')
plt.ylabel('')
plt.show()

"""### Компании для изучения

"""

df_plot = df['company_name'].value_counts().to_frame()[1:].head(20)


sns.set_theme(style='ticks')
sns.barplot(data=df_plot, x='count', y='company_name', hue='count', palette='dark:b_r', legend=False)
sns.despine()
plt.title('Количество рабочих мест в компании')
plt.xlabel('Количество рабочих мест')
plt.ylabel('')
plt.show()

"""### Возможности трудоустройства

"""

dict_column = {
    'job_work_from_home': 'Предл. работа на дому',
    'job_no_degree_mention': 'Треб. по высш. образов.',
    'job_health_insurance': 'Медицинская страховка'
}


fig, ax = plt.subplots(1, 3, figsize=(11, 3.5))


for i, (column, title) in enumerate(dict_column.items()):
    ax[i].pie(df[column].value_counts(), labels=['False', 'True'], autopct='%1.1f%%', startangle=90)
    ax[i].set_title(title)


plt.show()

dict_column = {
    'job_work_from_home': 'Предл. работа на дому',
    'job_no_degree_mention': 'Треб. по высш. образов.',
    'job_health_insurance': 'Медицинская страховка'
}


fig, ax = plt.subplots(1, 3, figsize=(11, 3.5))


for i, (column, title) in enumerate(dict_column.items()):
    ax[i].pie(df[column].value_counts(), labels=['Нет', 'Да'], autopct='%1.1f%%', startangle=90)
    ax[i].set_title(title)


plt.show()

"""## Исследовательский анализ данных для аналитиков данных в США


"""

# Импорт библиотек
import ast
import pandas as pd
import seaborn as sns
from datasets import load_dataset
import matplotlib.pyplot as plt


# Загрузка данных
dataset = load_dataset('lukebarousse/data_jobs')
df = dataset['train'].to_pandas()


# Очистка данных
df['job_posted_date'] = pd.to_datetime(df['job_posted_date'])
df['job_skills'] = df['job_skills'].apply(lambda x: ast.literal_eval(x) if pd.notna(x) else x)

"""### Фильтр для ролей аналитика данных в США"""

df_DA_US = df[(df['job_country'] == 'United States') & (df['job_title_short'] == 'Data Analyst')]

"""### Локации для исследования:

"""

df_plot = df_DA_US['job_location'].value_counts().head(10).to_frame()


sns.set_theme(style='ticks')
sns.barplot(data=df_plot, x='count', y='job_location', hue='count', palette='dark:b_r', legend=False)
sns.despine()
plt.title('Количество мест работы для аналитика данных в США')
plt.xlabel('Количество рабочих мест')
plt.ylabel('')
plt.show()

"""### Возможности работы

### Компании для изучения:
"""

df_plot = df_DA_US['company_name'].value_counts().head(10).to_frame()


sns.set_theme(style='ticks')
sns.barplot(data=df_plot, x='count', y='company_name', hue='count', palette='dark:b_r', legend=False)
sns.despine()
plt.title('Количество компаний для аналитика данных в США')
plt.xlabel('Количество рабочих мест')
plt.ylabel('')
plt.show()

"""# Каковы наиболее востребованные навыки для 3 самых популярных профессий в области данных?


#### Методология
1. Очистка колонки навыков
2. Рассчитать количество навыков на основе `job_title_short`.
3. Вычислите процентное соотношение навыков
4. Постройте график итоговых результатов


#### Оригинальное исследование
[13_Matplotlib_Format_Charts.ipynb](../2_Advanced/13_Matplotlib_Format_Charts.ipynb)

"""

# Импорт библиотек
import ast
import pandas as pd
import seaborn as sns
from datasets import load_dataset
import matplotlib.pyplot as plt


# Загрузка данных
dataset = load_dataset('lukebarousse/data_jobs')
df = dataset['train'].to_pandas()


# Очистка данных
df['job_posted_date'] = pd.to_datetime(df['job_posted_date'])
df['job_skills'] = df['job_skills'].apply(lambda x: ast.literal_eval(x) if pd.notna(x) else x)

"""## Фильтр данных для Соединенных Штатов

Отфильтруйте данные по рынку Соединенных Штатов.

"""

df_US = df[df['job_country'] == 'United States']

"""## Исследование навыков

Преобразует столбец `job_skills` из строковых представлений списков в реальные объекты списков, а затем расширяет эти списки так, чтобы каждый навык отображался в отдельной строке. Затем он отображает столбцы `job_title` и `job_skills`, позволяя нам проанализировать распределение навыков по различным наименованиям должностей.
"""

df_skills = df_US.explode('job_skills')


df_skills[['job_title', 'job_skills']]

df_skills = df_US.explode('job_skills')


df_skills[['job_title', 'job_skills']]

"""## Подсчет навыков для должностей


Группирует DataFrame по `job_skills` и `job_title_short`, подсчитывая количество вхождений каждого навыка в каждое название должности. Затем сбрасывает индекс серии, чтобы превратить ее обратно в DataFrame, и переименовывает серию, содержащую подсчет, в 'count'. Итоговый DataFrame, `df_skills_count`, показывает частоту встречаемости каждого навыка в каждом названии должности.

"""

# Группировка по job_skills и job_title_short и подсчет количества появлений
df_skills_count = df_skills.groupby(['job_skills', 'job_title_short']).size()


# Назовите столбец подсчета как count
df_skills_count = df_skills_count.reset_index(name='skill_count')


# Отсортируйте значения по счету_навыков в порядке убывания
df_skills_count.sort_values(by='skill_count', ascending=False, inplace=True)


df_skills_count

"""## Создайте список из 3 лучших ролей


#### Фокус: Аналитики данных, инженеры данных и ученые по данным


Отфильтруйте названия должностей по наиболее популярным.


"""

job_titles = df_skills_count['job_title_short'].unique().tolist()


job_titles = sorted(job_titles[:3])


job_titles

"""## Начертить графики умений
Создает сложенную горизонтальную гистограмму для 5 лучших навыков для топ-3 ролей, отображающую частоту использования каждого навыка.

"""

fig, ax = plt.subplots(len(job_titles), 1)


sns.set_theme(style='ticks')


for i, job_title in enumerate(job_titles):
    df_plot = df_skills_count[df_skills_count['job_title_short'] == job_title].head(5)[::-1]
    sns.barplot(data=df_plot, x='skill_count', y='job_skills', ax=ax[i], hue='skill_count', palette='dark:b_r')
    ax[i].set_title(job_title)
    ax[i].invert_yaxis()
    ax[i].set_ylabel('')
    ax[i].set_xlabel('')
    ax[i].get_legend().remove()
    ax[i].set_xlim(0, 45000) # сделать шкалы одинаковыми


fig.suptitle('Количество навыков, требуемых в объявлениях о вакансиях в США', fontsize=5)
fig.tight_layout(h_pad=0.5) # исправить перекрытие


plt.show()

"""## Преобразование числа в проценты


#### Фокус: Подсчеты не показывают, в какой части вакансий требуются эти навыки.


Поэтому мы преобразуем подсчеты в проценты, что поможет нам понять, как каждое название должности выглядит по отношению ко всему набору данных.


Прежде чем вычислять процентное соотношение, нам нужно получить общее количество вакансий, размещенных по названию должности. Вычислите частоту каждого названия вакансии, используя метод `value_counts()` для столбца `job_title_short`. Затем сбросьте индекс, чтобы преобразовать серию в DataFrame, и переименуйте столбцы в `job_title_short` и `total`. Теперь DataFrame `df_job_title_count` содержит список названий должностей вместе с их общим количеством.


"""

# Используйте исходный df для получения количества названий должностей
df_job_title_count = df_US['job_title_short'].value_counts().reset_index(name='jobs_total')


df_job_title_count

"""Затем мы вычисляем процентное соотношение. Сначала объедините `df_skills_count` и `df_job_title_count`, основываясь на столбце 'job_title_short', обеспечивая, чтобы количество навыков было связано с общим количеством объявлений о работе для этого названия. Затем рассчитайте процентное соотношение каждого навыка в названии должности, разделив количество навыков на общее количество вакансий и умножив на 100, и добавьте эти новые данные в столбец «процент».

"""

df_skills_perc = pd.merge(df_skills_count, df_job_title_count, on='job_title_short', how='left')


df_skills_perc['skill_percent'] = (df_skills_perc['skill_count'] / df_skills_perc['jobs_total']) * 100


df_skills_perc

"""## Начертить счетчик процентов
Фильтрует и сортирует DataFrame, чтобы получить 5 лучших навыков в процентах для этих трех лучших ролей. После сортировки навыков по убыванию процента измените порядок этих 5 лучших записей, чтобы использовать их в горизонтальной гистограмме, которая по умолчанию начинает строиться снизу.

"""

fig, ax = plt.subplots(len(job_titles), 1)




for i, job_title in enumerate(job_titles):
    df_plot = df_skills_perc[df_skills_perc['job_title_short'] == job_title].head(5)
    sns.barplot(data=df_plot, x='skill_percent', y='job_skills', ax=ax[i], hue='skill_count', palette='dark:b_r')
    ax[i].set_title(job_title)
    ax[i].set_ylabel('')
    ax[i].set_xlabel('')
    ax[i].get_legend().remove()
    ax[i].set_xlim(0, 78)
    # удалите метки на оси x для лучшей читаемости
    if i != len(job_titles) - 1:
        ax[i].set_xticks([])


    # обозначьте процент на столбиках
    for n, v in enumerate(df_plot['skill_percent']):
        ax[i].text(v + 1, n, f'{v:.0f}%', va='center')


fig.suptitle('Вероятность наличия требуемых навыков в объявлениях о вакансиях в США', fontsize=15)
fig.tight_layout(h_pad=.8)
plt.show()

"""# Насколько хорошо оплачивается работа и навыки аналитиков данных?

#### Методология
1. Оцените медианную зарплату для 6 лучших профессий, связанных с данными.
2. Найдите медианную зарплату по каждому навыку для аналитиков данных
3. Визуализация наиболее высокооплачиваемых и наиболее востребованных навыков


"""

# Импорт библиотек
import ast
import pandas as pd
import seaborn as sns
from datasets import load_dataset
import matplotlib.pyplot as plt


# Загрузка данных
dataset = load_dataset('lukebarousse/data_jobs')
df = dataset['train'].to_pandas()


# Очистка данных
df['job_posted_date'] = pd.to_datetime(df['job_posted_date'])
df['job_skills'] = df['job_skills'].apply(lambda x: ast.literal_eval(x) if pd.notna(x) else x)

"""## Распределение зарплаты по должностям
Отфильтруйте наши данные, чтобы включить только значения зарплат из Соединенных Штатов.

"""

# filter for the job titles and country
df_US = df[(df['job_country'] == 'United States')].dropna(subset=['salary_year_avg'])

"""Создайте список основных названий должностей в нашем наборе данных и отфильтруйте наш кадр данных, чтобы он содержал только эти названия должностей.

"""

job_titles = df_US['job_title_short'].value_counts().index[:6].tolist()


# отфильтровать df для 6 лучших названий должностей
df_US_top6 = df_US[df_US['job_title_short'].isin(job_titles)]


# order the job titles by median salary
job_order = df_US_top6.groupby('job_title_short')['salary_year_avg'].median().sort_values(ascending=False).index


job_titles

"""## График распределения заработной платы
Постройте распределение зарплат 6 лучших наименований должностей с помощью бокс-диаграммы.

"""

sns.boxplot(data=df_US_top6, x='salary_year_avg', y='job_title_short', order=job_order)
sns.set_theme(style='ticks')
sns.despine()


plt.title('Распределение заработной платы в США')
plt.xlabel('Годовая зарплата (USD)')
plt.ylabel('')
plt.xlim(0, 600000)
ticks_x = plt.FuncFormatter(lambda y, pos: f'${int(y/1000)}K')
plt.gca().xaxis.set_major_formatter(ticks_x)
plt.show()

"""## Исследуйте среднюю зарплату аналитиков данных в зависимости от их квалификации

Отфильтруйте исходный набор данных, чтобы получить только строки, в которых название должности - 'Data Analyst', а страна - 'United States', и создайте новый фрейм данных df_DA_US. Удалите NaN-значения из столбца 'salary_year_avg'. Затем он использует метод explode для столбца job_skills, чтобы создать новую строку в DataFrame для каждого навыка, связанного с работой. Наконец, он отображает первые пять записей в столбцах salary_year_avg и job_skills.


"""

# Работа аналитика данных только по США
df_DA_US = df[(df['job_title_short'] == 'Data Analyst') & (df['job_country'] == 'United States')].copy()


# Удалите NaN-значения из столбца 'salary_year_avg' для точной визуализации
df_DA_US = df_DA_US.dropna(subset=['salary_year_avg'])


df_DA_US = df_DA_US.explode('job_skills')


df_DA_US[['salary_year_avg', 'job_skills']].head(5)

"""## Определите самые высокооплачиваемые и самые востребованные навыки

Получает десять самых высокооплачиваемых навыков для аналитиков данных, вычисляя медианную зарплату для каждого навыка, указанного в `df_DA_US`. Он группирует данные по навыкам работы, вычисляет медианную зарплату, сортирует эти значения в порядке убывания по медиане, а затем выбирает 10 лучших. Затем эти данные форматируются в новый DataFrame (`df_DA_top_pay`) со сброшенным индексом и переименованным столбцом зарплаты с меткой 'median_salary'.

"""

df_DA_top_pay = df_DA_US.groupby('job_skills')['salary_year_avg'].agg(['count', 'median']).sort_values(by='median', ascending=False)


df_DA_top_pay = df_DA_top_pay.head(10)


df_DA_top_pay

"""Вычисляет количество и медианную зарплату для каждого навыка в `df_DA_US`. Он группирует данные по `job_skills`, агрегирует их, чтобы найти количество и медианную зарплату для каждого навыка, а затем сортирует результаты по количеству в порядке убывания по количеству. Это подмножество повторно сортируется по медианной зарплате в порядке убывания.

"""

df_DA_skills = df_DA_US.groupby('job_skills')['salary_year_avg'].agg(['count', 'median']).sort_values(by='count', ascending=False)


df_DA_skills = df_DA_skills.head(10).sort_values(by='median', ascending=False)


df_DA_skills

"""Создает две горизонтальные гистограммы:
1. Отображает самые высокооплачиваемые навыки
2. Показывает наиболее востребованные навыки


"""

fig, ax = plt.subplots(2, 1)


# Top 10 Highest Paid Skills for Data Analysts
sns.barplot(data=df_DA_top_pay, x='median', y=df_DA_top_pay.index, hue='median', ax=ax[0], palette='dark:b_r')
ax[0].legend().remove()
# original code:
# df_DA_top_pay[::-1].plot(kind='barh', y='median', ax=ax[0], legend=False)
ax[0].set_title('Самые высокооплачиваемые навыки для аналитиков данных в США')
ax[0].set_ylabel('')
ax[0].set_xlabel('')
ax[0].xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'${int(x/1000)}K'))




# Top 10 Most In-Demand Skills for Data Analysts')
sns.barplot(data=df_DA_skills, x='median', y=df_DA_skills.index, hue='median', ax=ax[1], palette='light:b')
ax[1].legend().remove()
# original code:
# df_DA_skills[::-1].plot(kind='barh', y='median', ax=ax[1], legend=False)
ax[1].set_title('Самые востребованные навыки для аналитиков данных в США')
ax[1].set_ylabel('')
ax[1].set_xlabel('Медианная зарплата (USD)')
ax[1].set_xlim(ax[0].get_xlim())  # Set the same x-axis limits as the first plot
ax[1].xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'${int(x/1000)}K'))


sns.set_theme(style='ticks')
plt.tight_layout()
plt.show()

# rewrite the above with a for loop
dict_column = {
    'job_work_from_home': 'Предл. работа на дому',
    'job_no_degree_mention': 'Треб. по высш. образов.',
    'job_health_insurance': 'Медицинская страховка'
}


fig, ax = plt.subplots(1, 3)
fig.set_size_inches((12, 5))


for i, (column, title) in enumerate(dict_column.items()):
    ax[i].pie(df_DA_US[column].value_counts(), labels=['Нет', 'Да'], autopct='%1.1f%%', startangle=90)
    ax[i].set_title(title)


# plt.suptitle('Benefit Analysis of Data Jobs', fontsize=16)
plt.show()

!pip install datasets
# Импортируем библиотеки
import ast
import pandas as pd
import seaborn as sns
from datasets import load_dataset
import matplotlib.pyplot as plt